// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D path corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolate, model, 
void main()
{	
	mat4 model = model(is_moon, animation_seconds);

	// interpolate current point using barycentric coordinates and then normalize
	vec4 curr = vec4(normalize(interpolate(gl_TessCoord, pos_es_in[0].xyz, pos_es_in[1].xyz, pos_es_in[2].xyz)), 1.0);

	sphere_fs_in = curr.xyz;

	// transform normal in world space into camera space
    normal_fs_in = (transpose(inverse(view))*transpose(inverse(model))*vec4(sphere_fs_in, 1.0)).xyz;

    // set homogenous coordinate accordingly
	if (!is_moon) {
		view_pos_fs_in = view*model*curr;
		pos_fs_in = proj*view*model*curr;
	} else {
        float theta = (2.0*M_PI/4.0)*animation_seconds;
		vec4 translation = vec4(2*sin(theta), 0, 2*cos(theta), 0);
		view_pos_fs_in = view*(model*curr+translation);
		pos_fs_in = proj*view*(model*curr+translation);
	}

	gl_Position = pos_fs_in;	
}


